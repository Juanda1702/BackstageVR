using System;
using System.IO;

namespace UnityEngine.XR.Hands.Capture.Recording
{
    /// <summary>
    /// Provides a base class for XR Hand recording session implementations.
    /// </summary>
    public abstract class XRHandRecordingBase
    {
        /// <summary>
        /// The name of the recording. Used as the recording asset name when imported into Unity Editor.
        /// </summary>
        public string assetName
        {
            get => m_AssetName;
            internal set => m_AssetName = value;
        }

        /// <summary>
        /// The duration of the recording in seconds.
        /// </summary>
        public float durationInSeconds
        {
            get => m_DurationInSeconds;
            internal set => m_DurationInSeconds = value;
        }

        /// Get the internal binary filename (with extension) for this recording.
        internal string internalBinaryFileName => m_UniqueID + XRHandRecordingBinaryFileFormatConfigs.k_FileExtension;

        /// <summary>
        /// Deletes the persisted file of this recording from device.
        /// </summary>
        /// <remarks>
        /// This method permanently deletes the recording file from player device to free up space,
        /// only call this method when you are sure you no longer need the recording.
        /// </remarks>
        public abstract void Delete();

        /// <summary>
        /// Deletes a recording file from device's persistent storage by its filename.
        /// </summary>
        internal static void DeleteFileFromDisk(string fileName)
        {
            var filePath = Path.Combine(GetDeviceStoragePath(), fileName);

            try
            {
                if (File.Exists(filePath))
                    File.Delete(filePath);
            }
            catch (Exception e)
            {
                Debug.LogError($"Failed to delete file at {filePath}: {e}");
            }
        }

        /// <summary>
        /// Get the path to the persistent storage directory on the device where recording files are stored.
        /// </summary>
        internal static string GetDeviceStoragePath()
        {
            string devicePersistentDataPath = Application.persistentDataPath;
            return Path.Combine(devicePersistentDataPath, k_InternalStorageDirectory);
        }

        internal static string GenerateUniqueID()
        {
            return $"{k_UniqueIDPrefix}{DateTime.UtcNow:yyyyMMdd_HHmmss}_{Guid.NewGuid():N}";
        }

        const string k_InternalStorageDirectory = "RecordedHandData";
        const string k_UniqueIDPrefix = "XRHandRecording_";

        /// <summary>
        /// The name of the recording. Used as the recording asset name when imported into Unity Editor.
        /// </summary>
        protected internal string m_AssetName;

        /// <summary>
        /// The duration of the recording in seconds.
        /// </summary>
        protected internal float m_DurationInSeconds;

        /// <summary>
        /// The unique identifier for the recording session. Generated by <see cref="GenerateUniqueID"/>.
        /// This unique ID serves as the base filename for the binary recording file saved on device.
        /// </summary>
        protected internal string m_UniqueID;
    }
}
